#cloud-config
output: {all: '| tee -a /var/log/cloud-init-output.log'}
apt_update: true
packages:
#NFS
 - autofs
#Galaxy
 - gnuplot
 - liblist-moreutils-perl
 - libemail-valid-perl
 - libwww-mechanize-perl
 - libtie-ixhash-perl
 - libdbi-perl
 - libdbd-sqlite3-perl
 - openjdk-6-jre
 - python-dev
 - python-markupsafe
 - python-numpy
 - python-psycopg2
 - python-flask
 - python-pip
 - python-psutil
 - r-base
 - ruby1.9.1
 - samtools
 - unzip
 - zip
# LVM
 - lvm2
#Useful tools
 - mc
#Condor
 - libssl0.9.8
 - libvirt0
 - libdate-manip-perl
 - libyaml-syck-perl
#Profiler
 - pcp
 - git
runcmd:
 - [ pip, install, psutil, --upgrade ]
 - [ easy_install-2.6, globusonline_transfer_api_client ]
# - [ umount, /mnt ]
# - [ mkdir, -p, /ephemeral/0 ]
# - [ mount, /dev/xvdb, /ephemeral/0 ]
# - [ cp, -pr, /tmp, /ephemeral/0 ]
# - [ rm, -rf, /tmp ]
# - [ ln, -s, /ephemeral/0/tmp, /tmp ]
#Add a galaxy user
 - [ addgroup, --gid, 4000, galaxy ]
 - [ adduser, --home, /nfs/home/galaxy, --no-create-home, --uid, 4000, --ingroup, galaxy, --disabled-password, --gecos, '', galaxy ]
# Add the profile user used to run all jobs
 - [ addgroup, --gid, 4001, profile ]
 - [ adduser, --home, /nfs/home/profile, --no-create-home, --uid, 4001, --ingroup, profile, --disabled-password, --gecos, '', profile ]
 - echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8A7eGe3FmwXQsYLt9Uo3QG2y0RPc+Ys27dfeEyVlZ8POBa3DezJ0IoAr0emsVXee2wL/bdUTeFcTWcpEcZq7d8uKzSbccOBhwV5Vb+quYHrRTF+U7La/olxZF6SiTXNri9b/kCEmHYVrvesCxtB5JMNM00O/6+0p0gpZFB56NWEJDg3FUD0o0HkpfEETT4RIxvzaFmalLBxbLWTwb5yAoruWQThbGeWCbNTFl8bpi06m/pOYSOY10zMaMAjyKFmeueoYwVcKJXPFUDrNFTMvymG38UAl6IQLHQwcBOmuR3u+juAj95nOB/nwCzHnUp6LxN+PtoryMVofKrZ+oClfp ryan@chard.co.nz' >> /home/ubuntu/.ssh/authorized_keys


# setup hostname info
 - echo '$ip_addr $domain headnode' >> /etc/hosts
 - echo "$$(ec2metadata --local-ip) $$(ec2metadata --local-hostname)" >> /etc/hosts
 - echo "$$(ec2metadata --local-hostname)" > /etc/hostname
 - [ hostname, -F, /etc/hostname ]

# setup ephemeral filesystem...
# ...using single ephemeral volume
# - [ mkdir, -p, /ephemeral ]
#- [ ln, -s, /mnt, /ephemeral/0 ]

# setup ephemeral filesystem...
# ...using merged ephemeral volumes
 - [ mkdir, -p, /ephemeral/0 ]
 - [ umount, /mnt ]
 - [ pvcreate, /dev/xvdb ]
 - [ pvcreate, /dev/xvdc ]
 - [ pvcreate, /dev/xvdd ]
 - [ pvcreate, /dev/xvde ]
 - [ vgcreate, ephemeral, /dev/xvdb ]
 - [ vgextend, ephemeral, /dev/xvdc ]
 - [ vgextend, ephemeral, /dev/xvdd ]
 - [ vgextend, ephemeral, /dev/xvde ]
 - [ lvcreate, -l, 100%VG, -i, 1, -I, 64, ephemeral, -n, ephemeral ]
 - [ mke2fs, /dev/ephemeral/ephemeral ]
 - [ mount, /dev/ephemeral/ephemeral, /ephemeral/0 ]
 


# move /tmp to ephemeral FS
 - [ cp, -pr, /tmp, /ephemeral/0 ]
 - [ rm, -rf, /tmp ]
 - [ ln, -s, /ephemeral/0/tmp, /tmp ]

# I don't think this is actually necessary any more.
# Configure NFS and mount remote filesystems
 - [ mkdir, -p, /opt/galaxy ]
 - [ mkdir, -p, /mnt/galaxyTools ]
 - [ mkdir, -p, /mnt/galaxyIndices ]
 - [ mkdir, -p, /scratch ]
 - echo 'NEED_STATD=no' > /etc/default/nfs-common
 - echo 'NEED_IDMAPD=yes' >> /etc/default/nfs-common
 - echo '/- /etc/auto.nfs' >> /etc/auto.master
 - echo '/opt/galaxy -fstype=nfs4 $ip_addr:/opt/galaxy' >> /etc/auto.nfs
 - echo '/mnt/galaxyTools -fstype=nfs4 $ip_addr:/mnt/galaxyTools' >> /etc/auto.nfs
 - echo '/mnt/galaxyIndices -fstype=nfs4 $ip_addr:/mnt/galaxyIndices' >> /etc/auto.nfs
 - echo '/scratch -fstype=nfs4 $ip_addr:/ephemeral/0/scratch' >> /etc/auto.nfs
 - echo '[General]' > /etc/idmapd.conf
 - echo 'Verbosity = 0' >> /etc/idmapd.conf
 - echo 'Pipefs-Directory = /run/rpc_pipefs' >> /etc/idmapd.conf
 - echo 'Domain = globusgenomics.org' >> /etc/idmapd.conf
 - echo '[Mapping]' >> /etc/idmapd.conf
 - echo 'Nobody-User = nobody' >> /etc/idmapd.conf
 - echo 'Nobody-Group = nogroup' >> /etc/idmapd.conf
 - [ service, idmapd, restart ]
 - [ service, autofs, restart ]

# Increase both hard and soft on open files
 - echo '* - nofile 65000' >> /etc/security/limits.conf

# Add the galaxy user used to run all jobs
 - [ addgroup, --gid, 4000, galaxy ]
 - [ adduser, --uid, 4000, --ingroup, galaxy, --disabled-password, --gecos, '', galaxy ]
# Install Condor
 - [ wget, 'http://repo.globusgenomics.org/packages/condor_8.2.6-288241_amd64.deb' ]
 - [ dpkg, -i, 'condor_8.2.6-288241_amd64.deb' ]
# Configure Condor
 - [ mkdir, -p, /ephemeral/0/condor ]
 - [ chown, 'condor:condor', /ephemeral/0/condor ]
# - echo 'CONDOR_HOST = $ip_addr' > /etc/condor/condor_config.local
# - echo 'COLLECTOR_NAME = Globus Genomics Condor Pool' >> /etc/condor/condor_config.local
# - echo 'START = GlobusOnline =?= UNDEFINED' >> /etc/condor/condor_config.local
# - echo 'SUSPEND = FALSE' >> /etc/condor/condor_config.local
# - echo 'PREEMPT = FALSE' >> /etc/condor/condor_config.local
# - echo 'KILL = FALSE' >> /etc/condor/condor_config.local
# - echo 'DAEMON_LIST = MASTER, STARTD' >> /etc/condor/condor_config.local
# - echo 'ALLOW_READ = *' >> /etc/condor/condor_config.local
# - echo 'ALLOW_WRITE = *' >> /etc/condor/condor_config.local
# - echo 'EXECUTE = /ephemeral/0/condor' >> /etc/condor/condor_config.local
# - echo 'SLOT_TYPE_1 = cpus=$cpus' >> /etc/condor/condor_config.local
# - echo 'NUM_SLOTS_TYPE_1 = 1' >> /etc/condor/condor_config.local
# - echo 'SLOT_TYPE_1_PARTITIONABLE = true' >> /etc/condor/condor_config.local
# - echo 'FILESYSTEM_DOMAIN = globusgenomics.org' >> /etc/condor/condor_config.local
# - echo 'UID_DOMAIN = globusgenomics.org' >> /etc/condor/condor_config.local
# - echo 'TRUST_UID_DOMAIN = True' >> /etc/condor/condor_config.local
# - echo "NETWORK_INTERFACE = $$(ec2metadata --local-ip)" >> /etc/condor/condor_config.local
# - echo 'ulimit -n 65000' > /tmp/restart_condor.sh
# - echo 'service condor restart' >> /tmp/restart_condor.sh
#
 - libdate-manip-perl
 - libyaml-syck-perl - [ bash, /tmp/restart_condor.sh ]
 - echo 'condor_master' >> /opt/start_condor.sh
 - [ bash, /opt/start_condor.sh ]

# Configure self-termination
 - echo '#!/bin/bash' > /usr/local/bin/monitor_instance.sh
 - echo 'running_secs="$$(cat /proc/uptime | cut -d'.' -f1)"' >> /usr/local/bin/monitor_instance.sh
 - echo 'let minutes_left=60-running_secs/60' >> /usr/local/bin/monitor_instance.sh
 - echo 'if [[ $$minutes_left -gt 2 ]]; then' >> /usr/local/bin/monitor_instance.sh
 - echo '    exit 0' >> /usr/local/bin/monitor_instance.sh
 - echo 'fi' >> /usr/local/bin/monitor_instance.sh
 - echo 'daemonname="$$(ec2metadata --local-hostname)"' >> /usr/local/bin/monitor_instance.sh
 - echo 'claimed=`condor_status -claimed -direct $$daemonname`' >> /usr/local/bin/monitor_instance.sh
 - echo 'if [[ -z $$claimed ]]; then' >> /usr/local/bin/monitor_instance.sh
 - echo '    /sbin/shutdown -h now' >> /usr/local/bin/monitor_instance.sh
 - echo 'fi' >> /usr/local/bin/monitor_instance.sh
 - [ chmod, 755, /usr/local/bin/monitor_instance.sh ]
 - echo '* * * * * root /usr/local/bin/monitor_instance.sh' > /etc/cron.d/monitor_instance
# create a test script
 - echo '#!/bin/bash' > /opt/mytest.sh
 - echo 'echo "Hello from `hostname`"' >> /opt/mytest.sh
 - echo 'echo "Going to source the file $$OSG_GRID/setup.sh"' >> /opt/mytest.sh
 - echo 'echo "Resulting environment:"' >> /opt/mytest.sh
 - echo 'printenv' >> /opt/mytest.sh
 - echo 'echo "Output of lcg-cp --help (lcg-cp is a commonly used SRM client):"' >> /opt/mytest.sh
 - echo 'echo 'Directories in \$$OSG_APP'' >> /opt/mytest.sh
 - echo 'date' >> /opt/mytest.sh
 - echo 'sleep 10' >> /opt/mytest.sh
 - echo 'date' >> /opt/mytest.sh
 - [ chmod, 777, /opt/mytest.sh ]
 - [ chmod, 777, /ephemeral/0/ ]
 
# Start the flask server:
 - [ wget, 'http://homepages.ecs.vuw.ac.nz/~ryan/profile_server.py' ]
 - echo '#!/bin/bash' > /home/ubuntu/run_profile_server.sh
 - echo 'cd /home/ubuntu/' >> /home/ubuntu/run_profile_server.sh
 - echo 'python /profile_server.py' >> /home/ubuntu/run_profile_server.sh
 - [ chmod, 755, /home/ubuntu/run_profile_server.sh ]
 - [ sudo, su, ubuntu, -c, 'bash /home/ubuntu/run_profile_server.sh &']